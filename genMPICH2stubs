#! /bin/bash
#------------------------------------------------------------------------------
# License
#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
#     For more information about these patches, visit:
#         http://www.bluecape.com.pt/blueCFD
#
#     OpenFOAM's official site: http://www.openfoam.com
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     genMPICH2stubs
#
# Description
#     This script generates the link library and prepares the include 
#   files for MPICH2.
#
#------------------------------------------------------------------------------

#set up variables
MPIVERSION=`echo $FOAM_MPI | sed 's=mpich2\-=='`
INSTPACK_URL="http://www.mcs.anl.gov/research/projects/mpich2/downloads/tarballs/$MPIVERSION"
INSTPACK_X86="$FOAM_MPI-win-ia32.msi"
INSTPACK_X86_64="$FOAM_MPI-win-x86-64.msi"

if [ "x$WM_ARCH_OPTION" = "x64" ]; then
  INSTPACK_FILE=$INSTPACK_X86_64
else
  INSTPACK_FILE=$INSTPACK_X86
fi

export PATH=$PATH:$WM_THIRD_PARTY_DIR/platforms/$WM_ARCH$WM_COMPILER$WM_COMPILER_ARCH/pexports-0.44-1/bin

if ! isMinGW; then
  echo "Error: this script is meant to be used for MinGW compilers only!"
  exit 1
fi

# run from third-party directory only
cd ${0%/*} || exit 1
wmakeCheckPwd "$WM_THIRD_PARTY_DIR" || {
    echo "Error: Current directory is not \$WM_THIRD_PARTY_DIR"
    echo "    The environment variables are inconsistent with the installation."
    echo "    Check the OpenFOAM entries in your dot-files and source them."
    exit 1
}
. etc/tools/ThirdPartyFunctions
. etc/tools/makeExtraThirdPartyFunctions


#end of initializations -------------------------------------------


download_files()
{
  # Make sure wget is installed
  if test "x`which wget`" = "x" ; then
    echo "You need to install wget."
    exit 1
  fi

  downloadFile $INSTPACK_FILE $INSTPACK_URL/$INSTPACK_FILE
}


unpack_files()
{
  echo "Unpacking files..."

  rm $SRCDIR/*
  7z x $DownloadRepository/$INSTPACK_FILE -o$SRCDIR/ _*
  cd $SRCDIR
  TOUNPACK=`ls -1A _*`
  7z x $TOUNPACK
  rm $TOUNPACK
  find . -name "_*" | xargs grep 'MPI_INCLUDED' -sl | xargs -I {} mv {} mpi.h
  find . -name "_*" | xargs grep 'mpich2mpi.pdb' -sl | xargs -I {} mv {} mpich2mpi.dll
  rm _*
}


must_build_pexports()
{
  cd $WM_THIRD_PARTY_DIR
  ./build-pexports
}


function copy_and_link_mpich2
{
  cd "$BUILDDIR"

  echo -e "\033[1m Purging installed mpich2 \033[0m"
  rm -rf *
  
  echo -e "\033[1m copying necessary files \033[0m"
  mkdir bin
  mkdir lib
  mkdir include
  cp $SRCDIR/*.dll lib/
  cp $SRCDIR/*.h include/
}


function create_gcccompatible_library
{
  echo -e "\033[1m creating mpi.a \033[0m"
  WM_DLLTOOL=`echo $WM_CC | sed s/gcc/dlltool/`
  cd $BUILDDIR/lib
  $WM_DLLTOOL -d ../mpich2.def -l libmpi.a -D MPICH2MPI.DLL
}


function patch_mpi_includes
{

  echo -e "\033[1m patching mpi.h \033[0m"
  if [ "$WM_ARCH_OPTION" = "64" ]; then
    cd $BUILDDIR/include
echo '--- orig/include/mpi.h  2009-08-06 16:11:46.000000000 +0100
+++ mod/include/mpi.h 2009-10-12 12:59:08.000000000 +0100
@@ -331,7 +331,11 @@
 #define MPI_MODE_NOSUCCEED   16384 
 
 /* Definitions that are determined by configure. */
+#if defined(USE_GCC) || defined(__GNUC__)
+typedef long long MPI_Aint;
+#else
 typedef __int64 MPI_Aint;
+#endif
 typedef int MPI_Fint;
 /* FIXME: The following two definition are not defined by MPI and must not be
    included in the mpi.h file, as the MPI namespace is reserved to the MPI 
' | patch -p2

  fi
}


function cleanup
{
  if [ -n "$BUILDDIR" -a -e "$BUILDDIR" ]; then
    rm -rf "$BUILDDIR"
  fi
}



#script start ------------------------------------------------------

if isMinGW; then

  BUILDDIR="$MPI_ARCH_PATH"
  SRCDIR="$MPI_HOME/source"
  
  if [ $# -eq 1 -a "$1" = "clean" ]; then

    echo -e "\033[1m Cleaning up MPICH2 stub... \033[0m"
    cleanup

  else

    if test -z "x`which 7z`" ; then
      echo "Please install 7zip. In Ubuntu, the package name is p7zip-full."
      echo "If 7zip isn't available for your Linux distribution, please go to www.7zip.org to download the generic version."
      exit 1
    fi

    mkdir -p "$BUILDDIR"
    if [ ! -d "$SRCDIR" ]; then mkdir -p "$SRCDIR"; fi

    if [ -d "$SRCDIR" ]; then

      if [ ! -e "$BUILDDIR/lib/libmpi.a" ]; then

        echo -e "\033[1m Downloading necessary MPICH2 installation files...\033[0m"
        download_files

        echo -e "\033[1m Unpacking necessary MPICH2 installation files...\033[0m"
        unpack_files

        if test "x`which pexports`" = "x" ; then
          must_build_pexports
        fi

        echo -e "\033[1m Generating MPICH2 stub... \033[0m"

        copy_and_link_mpich2
        create_gcccompatible_library
        patch_mpi_includes
        echo -e "\033[1m All done. \033[0m"
      else
        echo -e "\033[1m MPICH2 stub is already built and ready to use. \033[0m"
      fi

    else
      echo -e "\033[1m Failed to complete, due to lack of folder $SRCDIR \033[0m"
    fi

    cd $WM_THIRD_PARTY_DIR

  fi
fi
