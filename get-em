#!/bin/sh
#------------------------------------------------------------------------------
# License
#
#     This file is part of the branch "get-em" available here:
#         https://github.com/wyldckat/ThirdParty-2.0.x/commits/get-em
#
#     These modifications have not been endorsed by OpenCFD Ltd nor SGI.
#
#     It's licensed under the same license of the target software, namely GPL
#   v3 or above (see <http://www.gnu.org/licenses/>).
#
#     The target software is OpenFOAM(R) <http://www.openfoam.com>, which is
#   trademarked by and Copyright (C) OpenCFD Ltd.
#
# File
#     get-em
#
# Description
#     It's designed to assist the user on the download and unpacking of the
#   various ThirdParty packages that may or may not be necessary for the proper
#   operation of OpenFOAM.
#     The option nomenclature is based on popular package managers, although
#   this script is an over-simplified version of any package manager.
#
# TODO
#   * Ability to choose/change mirrors, when available.
#   * When available, check the md5/sig checksum on the downloaded packages.
#   * Ability to pick package format: gz, bz2
#   * Ability to also remove the unpack folder and purge the whole version.
#
#------------------------------------------------------------------------------

Script=${0##*/}

# run from third-party directory only
cd ${0%/*} || exit 1
wmakeCheckPwd "$WM_THIRD_PARTY_DIR" || {
    echo "Error: Current directory is not \$WM_THIRD_PARTY_DIR"
    echo "    The environment variables are inconsistent with the installation."
    echo "    Check the OpenFOAM entries in your dot-files and source them."
    exit 1
}
[ -n "$FOAM_EXT_LIBBIN" ] || {
    echo "Error: FOAM_EXT_LIBBIN not set"
    echo "    Check the OpenFOAM entries in your dot-files and source them."
    exit 1
}
. etc/tools/ThirdPartyFunctions
. etc/tools/get-emFunctions

usage() {
    if ! ping www.openfoam.com -c 1 > /dev/null 2>&1; then
      echo WARNING: No Internet connection to the outside has been detected!
      echo Internet connection is needed for this script to work.
      echo If no Internet connection is available, please read README.org or README.html.
    fi

    exec 1>&2
    while [ "$#" -ge 1 ]; do echo "$1"; shift; done
    cat<<USAGE

Usage
    Must be executed from the ThirdParty folder and OpenFOAM's environment
  must be active. Usage:
     ./$Script li(st)
     ./$Script up(date) [APPLICATION]
     ./$Script ve(rsions) [APPLICATION]
     ./$Script ca(che) [APPLICATION]
     ./$Script so(urce) APPLICATION1=VERSION [APPLICATION2=VERSION] [...]
     ./$Script do(wnload) APPLICATION1=VERSION [APPLICATION2=VERSION] [...]
     ./$Script un(pack) APPLICATION1=VERSION [APPLICATION2=VERSION] [...]

Valid options (use only one per command)
  list     : shows a list of the retrievable software applications.
  update   : updates the cached lists of available versions.
  versions : shows the list of available versions.
  cache    : shows the list of already downloaded packages.
  source   : download (if necessary) and unpack the desired applications and respective versions.
  download : download (if necessary) the desired applications and respective versions.
  unpack   : unpack (if available) the desired applications and respective versions.

Special application markers and versions
  buildtools=default : download and unpack the default applications necessary for the currently selected WM_ARCH+WM_COMPILER build rule.
  APP=default   : APP is the name of the desired application, therefore downloading the pre-defined default version.
  APP=latest    : APP is the name of the desired application, therefore downloading the latest version available.

Examples
  Download only gcc 4.5.2:
      ./$Script source gcc=4.5.2

  Download only gcc latest:
      ./$Script source gcc=latest

USAGE
    exit 1
}

#if no options, show how to use
[ "$#" -eq 0 ] && usage

#secure local variables
listOpt=0
versionsOpt=0
updateOpt=0
cacheOpt=0
downloadOpt=0
unpackOpt=0

# parse primary option
case "$1" in
h | he | help | -h | -help)
    usage
    ;;
li | list)
    listOpt=1
    ;;
up | update)
    updateOpt=1
    ;;
ve | versions)
    versionsOpt=1
    ;;
ca | cache)
    cacheOpt=1
    ;;
so | source)
    downloadOpt=1
    unpackOpt=1
    ;;
do | download)
    downloadOpt=1
    ;;
un | unpack)
    unpackOpt=1
    ;;
*)
    usage "unknown option/argument: '$1'"
    ;;
esac

#now, according to each option, parse and handle the remaining options
if [ $listOpt -eq 1 ]; then

  [ "$#" -gt 1 ] && usage "Too many arguments..."
  displayValidApps

elif [ $updateOpt -eq 1 ]; then

  [ "$#" -gt 2 ] && usage "Too many arguments..."
  if [ "$#" -eq 2 ]; then
    updateVersion $2
  else
    updateVersions
  fi

elif [ $versionsOpt -eq 1 ]; then

  [ "$#" -gt 2 ] && usage "Too many arguments..."

  if [ "$#" -eq 2 ]; then
    displayVersionsForApp $2
  else
    displayVersionsForAll
  fi

elif [ $cacheOpt -eq 1 ]; then

  [ "$#" -gt 2 ] && usage "Too many arguments..."

  if [ "$#" -eq 2 ]; then
    displayCacheForApp $2
  else
    displayCacheForAll
  fi

elif [ $downloadOpt -eq 1 -o $unpackOpt -eq 1 ]; then

  [ "$#" -lt 2 ] && usage "Insufficient arguments..."

  shift #a must in this case

  if [ $downloadOpt -eq 1 ]; then
    downloadApps $*
    displayFailedDownloads
  fi

  if [ $unpackOpt -eq 1 ]; then
    unpackApps $*
  fi
fi

echo #empty line
echo $Script tasks completed.
