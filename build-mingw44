#! /bin/sh
#------------------------------------------------------------------------------
# License
#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
#     For more information about these patches, visit:
#         http://www.bluecape.com.pt/blueCFD
#
#     OpenFOAM's official site: http://www.openfoam.com
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     build-mingw44
#
# Description
#     Build script for mingw with gcc 4.4.x. It works with mingw32, mingw-w32 
#   and mingw-w64.
#   This build script was originally based on the build script available at
#     http://www.symscape.com/files/articles/openfoam-windows/build-mingw
#
#------------------------------------------------------------------------------
# run from third-party directory only
cd ${0%/*} || exit 1
wmakeCheckPwd "$WM_THIRD_PARTY_DIR" || {
  echo "Error: Current directory is not \$WM_THIRD_PARTY_DIR"
  echo "    The environment variables are inconsistent with the installation."
  echo "    Check the OpenFOAM entries in your dot-files and source them."
  exit 1
}
. etc/tools/ThirdPartyFunctions
. etc/tools/makeExtraThirdPartyFunctions
#------------------------------------------------------------------------------

#-----------------------------------------------------
#
# BEGIN USER SETTINGS
#
# You need to review and adjust the macros that follow
#
#-----------------------------------------------------

#GNU GCC and company
GCCVERSION="gcc-4.4.6"
GMPVERSION="gmp-4.3.2"
MPFRVERSION="mpfr-2.4.2"
BINUTILSVERSION="binutils-2.20.1"

#MinGW versions
MINGW32RTVERSION="mingwrt-3.18"
W32APIVERSION="w32api-3.14"
MINGW_W64_VERSION="1.x" #1.x or 2.x

#LOG FOLDER
LOG_FOLDER="$WM_THIRD_PARTY_DIR/../buildLogs"

#-----------------------------------------------------
#
# END USER SETTINGS
#
# The remainder of the script should not neet any edits
#
#-----------------------------------------------------


# What flavor of GCC cross-compiler are we building?
case $WM_COMPILER in
mingw32 | mingw-w32)
  echo "This compiler $WM_COMPILER is currently supported for building the mingw cross-compiler."
  TARGET=i686-pc-mingw32 #32bits
  #SJLJ_OPTION="--disable-sjlj-exceptions" #the old option
  SJLJ_OPTION="--enable-sjlj-exceptions" #to make it similar to the gcc 4.5.x version builds
  ;;
mingw-w64)
  echo "This compiler $WM_COMPILER is currently supported for building the mingw cross-compiler."
  TARGET=x86_64-w64-mingw32 #64bits
  SJLJ_OPTION="--enable-sjlj-exceptions" #so it can work in Windows Vista/7 x64
  ;;
*)
  echo "Error: this compiler $WM_COMPILER is not supported."
  exit 1
  ;;
esac

# What build should we make
definedBUILDmachine

#WM_COMPILER_DIR <- this is the prefix for all builds made here!
#buildBASE <- this is where the things are going to be built
#$buildBASE/$---VERSION <- this is where each package is going to be built
#$WM_THIRD_PARTY_DIR/$---VERSION <- this is where each source folder will be

GCC_HOME="$WM_THIRD_PARTY_DIR/$GCCVERSION"
GMP_HOME="$WM_THIRD_PARTY_DIR/$GMPVERSION"
MPFR_HOME="$WM_THIRD_PARTY_DIR/$MPFRVERSION"
BINUTILS_HOME="$WM_THIRD_PARTY_DIR/$BINUTILSVERSION"

MINGW32RT_HOME="$WM_THIRD_PARTY_DIR/$MINGW32RTVERSION"
W32API_HOME="$WM_THIRD_PARTY_DIR/$W32APIVERSION"

MINGW_W64_HOME="$WM_THIRD_PARTY_DIR/mingw-w64-crt"

PREFIX="$WM_COMPILER_DIR"
PURGE=""

if [ -d "$PREFIX" ]; then
  echo "It seems that there is already an existing mingw cross-compiler installed."
  echo "Do you wish to remove it and update it to the latest available version? (yes or no)"
  read answer
  case $answer in
      yes | y | Y | Yes | YES)
        rm -rf "$PREFIX"
        PURGE="Y"
        ;;
      *)
        echo "Installation aborted."
        exit 1
        ;;
  esac
fi

if [ -d "$buildBASE" ]; then
  rm -rf "$buildBASE"
fi

#make sure the log folder exists and expand its path
if [ ! -d "$LOG_FOLDER" ]; then
  mkdir -p $LOG_FOLDER
fi
LOG_FOLDER=`( cd "$LOG_FOLDER" && pwd )`

GCC_BDIR="$buildBASE/$GCCVERSION"
BINUTILS_BDIR="$buildBASE/$BINUTILSVERSION"

MINGW32RT_BDIR="$buildBASE/$MINGW32RTVERSION"
W32API_BDIR="$buildBASE/$W32APIVERSION"

MINGW_W64_BDIR="$buildBASE/mingw-w64-crt"


#set architecture bits
ABI=$WM_ARCH_OPTION


#define files to download and respective URLS
GCC_TARFILE="${GCCVERSION}.tar.bz2"
GMP_TARFILE="${GMPVERSION}.tar.bz2"
MPFR_TARFILE="${MPFRVERSION}.tar.bz2"
BINUTILS_TARFILE="${BINUTILSVERSION}.tar.bz2"

MINGW64_TARFILE="mingw-w64-v${MINGW_W64_VERSION}.tar.gz"

#MinGW versions
MINGW32RT_TARFILE="${MINGW32RTVERSION}-mingw32-dev.tar.gz"
W32API_TARFILE="${W32APIVERSION}-mingw32-dev.tar.gz"


GNU_URL="ftp://ftp.mirrorservice.org/sites/sourceware.org/pub/gcc/releases/${GCCVERSION}/${GCC_TARFILE}"
GMP_URL="ftp://ftp.gnu.org/gnu/gmp/${GMP_TARFILE}"
MPFR_URL="ftp://ftp.gnu.org/gnu/mpfr/${MPFR_TARFILE}"
BINUTILS_URL="ftp://ftp.mirrorservice.org/sites/sourceware.org/pub/binutils/releases/${BINUTILS_TARFILE}"

MINGW64_URL="http://mingw-w64.svn.sourceforge.net/viewvc/mingw-w64/stable/v${MINGW_W64_VERSION}/?view=tar"

#MinGW versions
MINGW32RT_URL="http://downloads.sourceforge.net/project/mingw/MinGW/BaseSystem/RuntimeLibrary/MinGW-RT/${MINGW32RTVERSION}/${MINGW32RT_TARFILE}?use_mirror=mesh"
W32API_URL="http://downloads.sourceforge.net/project/mingw/MinGW/BaseSystem/RuntimeLibrary/Win32-API/${W32APIVERSION}/${W32API_TARFILE}?use_mirror=mesh"


# Make sure these are initialized as we want them

GCC_CORE=""
BINUTILS=""
GCC_LANGS="c,c++"



#-----------------------------------------------------
#
# Functions that do most of the work
#
#-----------------------------------------------------


download_files()
{
  # Make sure wget is installed
  if test "x`which wget`" = "x" ; then
    echo "You need to install wget."
    exit 1
  fi

  downloadFile $GCC_TARFILE $GNU_URL
  downloadFile $GMP_TARFILE $GMP_URL
  downloadFile $MPFR_TARFILE $MPFR_URL
  downloadFile $BINUTILS_TARFILE $BINUTILS_URL

  case $WM_COMPILER in
  mingw32)
    downloadFile $MINGW32RT_TARFILE $MINGW32RT_URL
    downloadFile $W32API_TARFILE $W32API_URL
    ;;
  mingw-w32 | mingw-w64)
    downloadFile $MINGW64_TARFILE $MINGW64_URL
    if [ -e "$DownloadRepository/index.html?view=tar" ]; then
      mv $DownloadRepository/"index.html?view=tar" $DownloadRepository/$MINGW64_TARFILE
    fi
    ;;
  esac
}


purge_folder()
{
  if [ -d "$1" ]; then
    rm -rf "$1"
  fi
}


purge_homes()
{
  purge_folder "$GCC_HOME"
  purge_folder "$GMP_HOME"
  purge_folder "$MPFR_HOME"
  purge_folder "$BINUTILS_HOME"

  case $WM_COMPILER in
  mingw32)
    purge_folder "$MINGW32RT_HOME"
    purge_folder "$W32API_HOME"
    ;;
  mingw-w32 | mingw-w64)
    purge_folder "$MINGW_W64_HOME"
    ;;
  esac
}


unpack_files()
{
  echo "Unpacking files..."

  if [ "x$PURGE" != "x" ]; then
    purge_homes
  fi

  unpackFile $GCC_TARFILE
  unpackFile $GMP_TARFILE
  unpackFile $MPFR_TARFILE
  unpackFile $BINUTILS_TARFILE
  
  #fix links for GMP and MPFR
  do_links_GM

  case $WM_COMPILER in
  mingw32)
    unpackFile $MINGW32RT_TARFILE $PREFIX/$TARGET/
    unpackFile $W32API_TARFILE $PREFIX/$TARGET/
    ;;
  mingw-w32 | mingw-w64)
    unpackFile $MINGW64_TARFILE
    moveUnpackedFolder $MINGW64_TARFILE $MINGW_W64_HOME
    ;;
  esac
}


do_links_GM()
{
  #hook up gmp and mpfr to gcc's folder
  if [ ! -d "$GCC_HOME/gmp" ]; then
    ln -s $GMP_HOME $GCC_HOME/gmp
  fi
  if [ ! -d "$GCC_HOME/mpfr" ]; then
    ln -s $MPFR_HOME $GCC_HOME/mpfr
  fi
}


configure_binutils()
{
  mkdir -p "$BINUTILS_BDIR"
  cd "$BINUTILS_BDIR"
  echo "Configuring binutils"
  "$BINUTILS_HOME/configure" --prefix=${PREFIX} \
      --target=${TARGET} --disable-nls \
      --with-sysroot=${PREFIX}  --disable-multilib \
      --with-host-libstdcxx='-lstdc++' --with-gcc \
      --with-gnu-as --with-gnu-ld --enable-shared --disable-rpath \
      --disable-werror \
      > ${LOG_FOLDER}/binutils-${WM_COMPILER}_configure.log  2>&1
      #--libdir=$PREFIX/$TARGET/lib --includedir=$PREFIX/$TARGET/include  --with-build-sysroot=$PREFIX  
  if test $? -ne 0; then
    echo "make of binutils failed - log available: ${LOG_FOLDER}/binutils-${WM_COMPILER}_configure.log"
    exit 1
  fi
}


build_binutils()
{
  cd "$BINUTILS_BDIR"
  echo "Building binutils"
  # -fno-exceptions  
  make -j $WM_NCOMPPROCS CFLAGS="-O2" LDFLAGS="-s" > \
    ${LOG_FOLDER}/binutils-${WM_COMPILER}_make.log 2>&1
  if test $? -ne 0; then
    echo "make of binutils failed - log available: ${LOG_FOLDER}/binutils-${WM_COMPILER}_make.log"
    exit 1
  fi
}


install_binutils()
{
  cd "$BINUTILS_BDIR"
  echo "Installing binutils"
  make install > ${LOG_FOLDER}/binutils-${WM_COMPILER}_make-install.log 2>&1
  if test $? -ne 0; then
    echo "install of binutils failed - log available: ${LOG_FOLDER}/binutils-${WM_COMPILER}_make-install.log"
    exit 1
  fi
}


setup_mingw32_headersNlinks()
{
  echo "setting up the mingw32 headers and symlinks"
  if [ ! -L "$PREFIX/mingw" ];then ln -sv $TARGET $PREFIX/mingw; fi
  if [ ! -d "$PREFIX/mingw" ];then mkdir "$PREFIX/$TARGET/lib"; fi
}


setup_mingw_w64_headersNlinks()
{
  echo "setting up the mingw-w64 headers and symlinks"
  if [ ! -L "$PREFIX/mingw" ];then ln -sv $TARGET $PREFIX/mingw; fi
  cd "$MINGW_W64_HOME/mingw-w64-headers"
  cp -r include "$PREFIX/$TARGET/"
  if [ ! -d "$PREFIX/mingw" ];then mkdir "$PREFIX/$TARGET/lib"; fi
  if [ ! -L "$PREFIX/$TARGET/lib64" ];then ln -sv lib $PREFIX/$TARGET/lib64; fi
}


build_gcc_core()
{
  cd "$GCC_BDIR"
  echo "Building gcc core"
  make -j $WM_NCOMPPROCS CFLAGS="-O2" CXXFLAGS="-O2" GCJFLAGS="-O2" LDFLAGS="-s" \
    DEBUG_FLAGS="-g0" all-gcc > ${LOG_FOLDER}/gcccore-${WM_COMPILER}_make.log 2>&1
  if test $? -ne 0; then
    echo "make of gcc core failed - log available: ${LOG_FOLDER}/gcccore-${WM_COMPILER}_make.log"
    exit 1
  fi
}


install_gcc_core()
{
  cd "$GCC_BDIR"
  echo "Installing gcc core"
  make install-gcc > ${LOG_FOLDER}/gcccore-${WM_COMPILER}_make-install.log 2>&1
  if test $? -ne 0; then
    echo "install of gcc core failed - log available:  ${LOG_FOLDER}/gcccore-${WM_COMPILER}_make-install.log"
    exit 1
  fi
}


configure_mingw_w64crt()
{
  mkdir -p "$MINGW_W64_BDIR"
  cd "$MINGW_W64_BDIR"
  echo "Configuring mingw-w64-crt"
  "$MINGW_W64_HOME/mingw-w64-crt/configure" --prefix=${PREFIX} \
      --host=${TARGET} --with-sysroot=${PREFIX} \
      > ${LOG_FOLDER}/mingw-w64-${WM_COMPILER}_configure.log 2>&1
      # --with-build-sysroot=$PREFIX
  if test $? -ne 0; then
    echo "configure of mingw-w64-crt failed - log available: ${LOG_FOLDER}/mingw-w64-${WM_COMPILER}_configure.log"
    exit 1
  fi
}


build_mingw_w64crt()
{
  cd "$MINGW_W64_BDIR"
  echo "Building mingw-w64-crt"
  # -fno-exceptions 
  make -j $WM_NCOMPPROCS CFLAGS="-O2" LDFLAGS="-s" > \
    ${LOG_FOLDER}/mingw-w64-${WM_COMPILER}_make.log 2>&1
  if test $? -ne 0; then
    echo "make of mingw-w64-crt failed - log available: ${LOG_FOLDER}/mingw-w64-${WM_COMPILER}_make.log"
    exit 1
  fi
}


install_mingw_w64crt()
{
  cd "$MINGW_W64_BDIR"
  echo "Installing mingw-w64-crt"
  make install > ${LOG_FOLDER}/mingw-w64-${WM_COMPILER}_make-install.log 2>&1
  if test $? -ne 0; then
    echo "install of mingw-w64-crt failed - log available: ${LOG_FOLDER}/mingw-w64-${WM_COMPILER}_make-install.log"
    exit 1
  fi
}


configure_gcc()
{
  if [ -d "$GCC_BDIR" ]; then rm -rf "$GCC_BDIR"; fi
  mkdir -p "$GCC_BDIR"
  cd "$GCC_BDIR"
  echo "Configuring gcc"

  ${GCC_HOME}/configure -v \
    --prefix=${PREFIX} --target=${TARGET} \
    --with-sysroot=${PREFIX} --enable-fully-dynamic-strings --disable-werror \
    --disable-multilib \
    --with-pkgversion='OpenFOAM' --enable-languages=${GCC_LANGS} \
    --disable-win32-registry --enable-shared --disable-static ${SJLJ_OPTION} \
    --without-x --disable-debug \
    --enable-interpreter --with-host-libstdcxx='-lstdc++' \
    --with-gcc --with-gnu-ld --with-gnu-as --enable-libstdcxx-allocator=new \
    --enable-threads=win32 --disable-nls \
    > ${LOG_FOLDER}/gcc-${WM_COMPILER}_configure.log 2>&1

    #--build=$BUILD --host=$BUILD 
    #--with-build-sysroot=$PREFIX 
    #--enable-libstdcxx-debug  --disable-libgcj-debug  --disable-java-awt 
    
    # \

    #--with-system-zlib 
    #--with-mpfr=$PREFIX --with-gmp=$PREFIX \
    #--with-headers="$PREFIX/$TARGET/include" \
    #--enable-hash-synchronization 
    #--enable-libgcj   --disable-java-gc=boehm  \
    #--enable-decimal-float --disable-bootstrap --enable-static 
  if test $? -ne 0; then
    echo "configure of gcc failed - log available: ${LOG_FOLDER}/gcc-${WM_COMPILER}_configure.log"
    exit 1
  fi
}


build_gcc()
{
  cd "$GCC_BDIR"
  echo "Building the rest of gcc"
  #GCJFLAGS="-O2" DEBUG_FLAGS="-g0" 
  make -j $WM_NCOMPPROCS CFLAGS="-O2" CXXFLAGS="-O2" LDFLAGS="-s" > \
    ${LOG_FOLDER}/gcc-${WM_COMPILER}_make.log 2>&1
  if test $? -ne 0; then
    echo "make of gcc failed - log available: ${LOG_FOLDER}/gcc-${WM_COMPILER}_make.log"
    exit 1
  fi
}


install_gcc()
{
  cd "$GCC_BDIR"
  echo "Installing gcc"
  make install > ${LOG_FOLDER}/gcc-${WM_COMPILER}_make-install.log 2>&1
  if test $? -ne 0; then
    echo "install of gcc failed - log available: ${LOG_FOLDER}/gcc-${WM_COMPILER}_make-install.log"
    exit 1
  fi
}


createSTDCPPShared()
{
  cd "${PREFIX}/mingw/lib"
  mkdir tmp
  cd tmp

  #source http://mingw-users.1079350.n2.nabble.com/Complete-libstdc-dll-for-gcc-4-4-0-td3323078.html
  cp -f ../libstdc++.a libstdc++_t.a
  ${TARGET}-ar -x libstdc++_t.a array_type_info.o class_type_info.o enum_type_info.o \
    function_type_info.o fundamental_type_info.o pbase_type_info.o pmem_type_info.o \
    pointer_type_info.o si_class_type_info.o vmi_class_type_info.o
  ${TARGET}-ar -d libstdc++_t.a array_type_info.o class_type_info.o enum_type_info.o \
    function_type_info.o fundamental_type_info.o pbase_type_info.o pmem_type_info.o \
    pointer_type_info.o si_class_type_info.o vmi_class_type_info.o
  ${TARGET}-dlltool --export-all --output-def=../libstdc++.def libstdc++_t.a
  ${TARGET}-gcc -shared -shared-libgcc -o ${PREFIX}/bin/libstdc++-6.dll -Wl,--out-implib,../libstdc++.dll.a \
            ../libstdc++.def ../libstdc++.a
  ${TARGET}-ar -rs ../libstdc++.dll.a array_type_info.o class_type_info.o \
    enum_type_info.o function_type_info.o fundamental_type_info.o pbase_type_info.o \
    pmem_type_info.o pointer_type_info.o si_class_type_info.o vmi_class_type_info.o

  cd ..
  rm -rf tmp
  cp libstdc++.la libstdc++.la.bck.$(date +%Y-%m-%d_%H-%M)
  sed -i -e 's_\(^dlname=.\)\(.\)_\1../../bin/libstdc++-6.dll\2_' -e 's_\(^library\_names=.\)\(.\)_\1libstdc++.dll.a\2_' libstdc++.la
}


final_tweaks()
{
  echo "Finalizing installation"

  # remove gcc build headers
  rm -rf "${PREFIX}/${WM_COMPILER}/${TARGET}/sys-include"

  # create nice links for the binaries
  cd ${PREFIX}/bin
  for afile in `find . -name "${TARGET}-*"`; do
    LINKNAME=`echo $afile | sed -e 's='${TARGET}'='${WM_COMPILER}'='`
    ln -s $afile $LINKNAME
  done

  # strip all the binaries
#   ls "${PREFIX}"/bin/* "${PREFIX}/${TARGET}"/bin/* | egrep -v '.dll$' | egrep -v 'gccbug$' |
#   while read file; do
#     strip "$file"
#   done

  #create libstdc++-6.dll
  createSTDCPPShared

  #fix the float.h issue
  cd $WM_THIRD_PARTY_DIR
  ./fixSystemMingw force

  echo "Installation complete!"
}


#
# Main part of the script
#

download_files

unpack_files

configure_binutils
build_binutils
install_binutils

case $WM_COMPILER in
mingw32)
  setup_mingw32_headersNlinks
  configure_gcc
  build_gcc
  install_gcc
  ;;

mingw-w32 | mingw-w64)
  setup_mingw_w64_headersNlinks

  configure_gcc
  build_gcc_core
  install_gcc_core

  configure_mingw_w64crt
  build_mingw_w64crt
  install_mingw_w64crt

  build_gcc
  install_gcc
  ;;
esac

final_tweaks

#
# End
#
