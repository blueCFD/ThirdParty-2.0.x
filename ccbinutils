#! /bin/sh
#------------------------------------------------------------------------------
# License
#     This file is part of blueCAPE's unofficial mingw patches for OpenFOAM.
#     For more information about these patches, visit:
#         http://www.bluecape.com.pt/blueCFD
#
#     OpenFOAM's official site: http://www.openfoam.com
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# Script
#     ccbinutils
#
# Description
#     Build script for cross-compiling binutils. It works with mingw32, mingw-w32
#   and mingw-w64.
#
#------------------------------------------------------------------------------
# run from third-party directory only
cd ${0%/*} || exit 1
wmakeCheckPwd "$WM_THIRD_PARTY_DIR" || {
  echo "Error: Current directory is not \$WM_THIRD_PARTY_DIR"
  echo "    The environment variables are inconsistent with the installation."
  echo "    Check the OpenFOAM entries in your dot-files and source them."
  exit 1
}
. etc/tools/ThirdPartyFunctions
. etc/tools/makeExtraThirdPartyFunctions
#------------------------------------------------------------------------------

#-----------------------------------------------------
#
# BEGIN USER SETTINGS
#
# You need to review and adjust the macros that follow
#
#-----------------------------------------------------

#GNU GCC and company
BINUTILSVERSION="binutils-2.21"

#LOG FOLDER
LOG_FOLDER="$WM_THIRD_PARTY_DIR/../buildLogs"

#-----------------------------------------------------
#
# END USER SETTINGS
#
# The remainder of the script should not neet any edits
#
#-----------------------------------------------------


# What flavor of GCC cross-compiler are we building?
case $WM_COMPILER in
mingw32 | mingw-w32)
  echo "This compiler $WM_COMPILER is currently supported for building the mingw cross-compiler."
  TARGET=i686-pc-mingw32 #32bits
  ;;
mingw-w64)
  echo "This compiler $WM_COMPILER is currently supported for building the mingw cross-compiler."
  TARGET=x86_64-w64-mingw32 #64bits
  ;;
*)
  echo "Error: this compiler $WM_COMPILER is not supported."
  exit 1
  ;;
esac

#WM_COMPILER_DIR <- this is the prefix for all builds made here!
#buildBASE <- this is where the things are going to be built
#$buildBASE/$---VERSION <- this is where each package is going to be built
#$WM_THIRD_PARTY_DIR/$---VERSION <- this is where each source folder will be

BINUTILS_HOME="$WM_THIRD_PARTY_DIR/$BINUTILSVERSION"

PREFIX="${WM_COMPILER_DIR}_cc"
PURGE=""

if [ -d "$PREFIX" ]; then
  echo "It seems that there is already an existing cross-compiled binutils installed."
  echo "Do you wish to remove it and update it to the latest available version? (yes or no)"
  read answer
  case $answer in
      yes | y | Y | Yes | YES)
        rm -rf "$PREFIX"
        PURGE="Y"
        ;;
      *)
        echo "Installation aborted."
        exit 1
        ;;
  esac
fi

if [ -d "$buildBASE" ]; then
  rm -rf "$buildBASE"
fi

#make sure the log folder exists and expand its path
if [ ! -d "$LOG_FOLDER" ]; then
  mkdir -p $LOG_FOLDER
fi
LOG_FOLDER=`( cd "$LOG_FOLDER" && pwd )`

BINUTILS_BDIR="$buildBASE/$BINUTILSVERSION"

#define files to download and respective URLS
BINUTILS_TARFILE="${BINUTILSVERSION}.tar.bz2"

BINUTILS_URL="ftp://ftp.mirrorservice.org/sites/sourceware.org/pub/binutils/releases/${BINUTILS_TARFILE}"




#-----------------------------------------------------
#
# Functions that do most of the work
#
#-----------------------------------------------------


download_files()
{
  # Make sure wget is installed
  if test "x`which wget`" = "x" ; then
    echo "You need to install wget."
    exit 1
  fi

  downloadFile $BINUTILS_TARFILE $BINUTILS_URL

}


purge_folder()
{
  if [ -d "$1" ]; then
    rm -rf "$1"
  fi
}


purge_homes()
{
  purge_folder "$BINUTILS_HOME"
}


unpack_files()
{
  echo "Unpacking files..."

  if [ "x$PURGE" != "x" ]; then
    purge_homes
  fi

  unpackFile $BINUTILS_TARFILE
}


configure_binutils()
{
  mkdir -p "$BINUTILS_BDIR"
  cd "$BINUTILS_BDIR"
  echo "Configuring binutils"
  "$BINUTILS_HOME/configure" --prefix=${PREFIX} \
      --host=${TARGET} --target=${TARGET} --disable-nls \
      --with-sysroot=${PREFIX}  --disable-multilib \
      --with-host-libstdcxx='-lstdc++' --with-gcc \
      --with-gnu-as --with-gnu-ld --enable-shared --disable-rpath \
      --disable-werror \
      > ${LOG_FOLDER}/binutils_cc-${WM_COMPILER}_configure.log  2>&1
      #--libdir=$PREFIX/$TARGET/lib --includedir=$PREFIX/$TARGET/include  --with-build-sysroot=$PREFIX
  if test $? -ne 0; then
    echo "make of binutils failed - log available: ${LOG_FOLDER}/binutils_cc-${WM_COMPILER}_configure.log"
    exit 1
  fi
}


build_binutils()
{
  cd "$BINUTILS_BDIR"
  echo "Building binutils"
  # -fno-exceptions
  make -j $WM_NCOMPPROCS CFLAGS="-O2" LDFLAGS="-s" > \
    ${LOG_FOLDER}/binutils_cc-${WM_COMPILER}_make.log 2>&1
  if test $? -ne 0; then
    echo "make of binutils failed - log available: ${LOG_FOLDER}/binutils_cc-${WM_COMPILER}_make.log"
    exit 1
  fi
}


install_binutils()
{
  cd "$BINUTILS_BDIR"
  echo "Installing binutils"
  make install > ${LOG_FOLDER}/binutils_cc-${WM_COMPILER}_make-install.log 2>&1
  if test $? -ne 0; then
    echo "install of binutils failed - log available: ${LOG_FOLDER}/binutils_cc-${WM_COMPILER}_make-install.log"
    exit 1
  fi
}


#
# Main part of the script
#

download_files

unpack_files

configure_binutils
build_binutils
install_binutils


#
# End
#
